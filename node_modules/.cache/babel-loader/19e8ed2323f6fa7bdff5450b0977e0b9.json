{"ast":null,"code":"//Durstenfeld Shuffle Algorithm\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n} //Arrays with all id names for each suit\n\n\nvar spadesArray = [\"TwoSpades\", \"ThreeSpades\", \"FourSpades\", \"FiveSpades\", \"SixSpades\", \"SevenSpades\", \"EightSpades\", \"NineSpades\", \"TenSpades\", \"JackSpades\", \"QueenSpades\", \"KingSpades\", \"AceSpades\"];\nvar clubsArray = [\"TwoClubs\", \"ThreeClubs\", \"FourClubs\", \"FiveClubs\", \"SixClubs\", \"SevenClubs\", \"EightClubs\", \"NineClubs\", \"TenClubs\", \"JackClubs\", \"QueenClubs\", \"KingClubs\", \"AceClubs\"];\nvar diamondsArray = [\"TwoDiamonds\", \"ThreeDiamonds\", \"FourDiamonds\", \"FiveDiamonds\", \"SixDiamonds\", \"SevenDiamonds\", \"EightDiamonds\", \"NineDiamonds\", \"TenDiamonds\", \"JackDiamonds\", \"QueenDiamonds\", \"KingDiamonds\", \"AceDiamonds\"];\nvar heartsArray = [\"TwoHearts\", \"ThreeHearts\", \"FourHearts\", \"FiveHearts\", \"SixHearts\", \"SevenHearts\", \"EightHearts\", \"NineHearts\", \"TenHearts\", \"JackHearts\", \"QueenHearts\", \"KingHearts\", \"AceHearts\"];\nexport default function createInitialReduxState(suits) {\n  var correctOrder = [];\n  var actualOrder = [];\n\n  if (suits.includes(\"Spades\")) {\n    correctOrder.concat(spadesArray);\n  }\n\n  if (suits.includes(\"Clubs\")) {\n    correctOrder.concat(clubsArray);\n  }\n\n  if (suits.includes(\"Diamonds\")) {\n    correctOrder.concat(diamondsArray);\n  }\n\n  if (suits.includes(\"Hearts\")) {\n    correctOrder.concat(heartsArray);\n  }\n\n  actualOrder = shuffleArray(correctOrder.map(function (card) {\n    return {\n      type: card,\n      correct: false\n    };\n  }));\n  var state = {\n    correctOrder: correctOrder,\n    actualOrder: actualOrder,\n    numCorrect: 0\n  };\n  return state;\n}","map":{"version":3,"sources":["C:\\Users\\Rover\\Desktop\\Coding\\Card-Memory-Game\\src\\initialState.js"],"names":["shuffleArray","array","i","length","j","Math","floor","random","temp","spadesArray","clubsArray","diamondsArray","heartsArray","createInitialReduxState","suits","correctOrder","actualOrder","includes","concat","map","card","type","correct","state","numCorrect"],"mappings":"AAAA;AACA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,QAAIM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACH;AACJ,C,CAED;;;AACA,IAAMC,WAAW,GAAG,CAAC,WAAD,EAAc,aAAd,EAA6B,YAA7B,EAA2C,YAA3C,EAAyD,WAAzD,EACpB,aADoB,EACL,aADK,EACU,YADV,EACwB,WADxB,EAEpB,YAFoB,EAEN,aAFM,EAES,YAFT,EAEuB,WAFvB,CAApB;AAGA,IAAMC,UAAU,GAAG,CAAC,UAAD,EAAa,YAAb,EAA2B,WAA3B,EAAwC,WAAxC,EAAqD,UAArD,EACnB,YADmB,EACL,YADK,EACS,WADT,EACsB,UADtB,EAEnB,WAFmB,EAEN,YAFM,EAEQ,WAFR,EAEqB,UAFrB,CAAnB;AAGA,IAAMC,aAAa,GAAG,CAAC,aAAD,EAAgB,eAAhB,EAAiC,cAAjC,EAAiD,cAAjD,EAAiE,aAAjE,EACtB,eADsB,EACL,eADK,EACY,cADZ,EAC4B,aAD5B,EAEtB,cAFsB,EAEN,eAFM,EAEW,cAFX,EAE2B,aAF3B,CAAtB;AAGA,IAAMC,WAAW,GAAG,CAAC,WAAD,EAAc,aAAd,EAA6B,YAA7B,EAA2C,YAA3C,EAAyD,WAAzD,EACpB,aADoB,EACL,aADK,EACU,YADV,EACwB,WADxB,EAEpB,YAFoB,EAEN,aAFM,EAES,YAFT,EAEuB,WAFvB,CAApB;AAIA,eAAe,SAASC,uBAAT,CAAiCC,KAAjC,EAAuC;AAClD,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAGF,KAAK,CAACG,QAAN,CAAe,QAAf,CAAH,EAA4B;AACxBF,IAAAA,YAAY,CAACG,MAAb,CAAoBT,WAApB;AACH;;AACD,MAAGK,KAAK,CAACG,QAAN,CAAe,OAAf,CAAH,EAA2B;AACvBF,IAAAA,YAAY,CAACG,MAAb,CAAoBR,UAApB;AACH;;AACD,MAAGI,KAAK,CAACG,QAAN,CAAe,UAAf,CAAH,EAA8B;AAC1BF,IAAAA,YAAY,CAACG,MAAb,CAAoBP,aAApB;AACH;;AACD,MAAGG,KAAK,CAACG,QAAN,CAAe,QAAf,CAAH,EAA4B;AACxBF,IAAAA,YAAY,CAACG,MAAb,CAAoBN,WAApB;AACH;;AACDI,EAAAA,WAAW,GAAGhB,YAAY,CACtBe,YAAY,CAACI,GAAb,CAAiB,UAACC,IAAD,EAAU;AACvB,WAAO;AAAEC,MAAAA,IAAI,EAAED,IAAR;AAAcE,MAAAA,OAAO,EAAE;AAAvB,KAAP;AACH,GAFD,CADsB,CAA1B;AAMA,MAAMC,KAAK,GAAG;AACVR,IAAAA,YAAY,EAAEA,YADJ;AAEVC,IAAAA,WAAW,EAAEA,WAFH;AAGVQ,IAAAA,UAAU,EAAE;AAHF,GAAd;AAMA,SAAOD,KAAP;AACH","sourcesContent":["//Durstenfeld Shuffle Algorithm\r\nfunction shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n}\r\n\r\n//Arrays with all id names for each suit\r\nconst spadesArray = [\"TwoSpades\", \"ThreeSpades\", \"FourSpades\", \"FiveSpades\", \"SixSpades\",\r\n\"SevenSpades\", \"EightSpades\", \"NineSpades\", \"TenSpades\",\r\n\"JackSpades\", \"QueenSpades\", \"KingSpades\", \"AceSpades\"];\r\nconst clubsArray = [\"TwoClubs\", \"ThreeClubs\", \"FourClubs\", \"FiveClubs\", \"SixClubs\",\r\n\"SevenClubs\", \"EightClubs\", \"NineClubs\", \"TenClubs\",\r\n\"JackClubs\", \"QueenClubs\", \"KingClubs\", \"AceClubs\"];\r\nconst diamondsArray = [\"TwoDiamonds\", \"ThreeDiamonds\", \"FourDiamonds\", \"FiveDiamonds\", \"SixDiamonds\",\r\n\"SevenDiamonds\", \"EightDiamonds\", \"NineDiamonds\", \"TenDiamonds\",\r\n\"JackDiamonds\", \"QueenDiamonds\", \"KingDiamonds\", \"AceDiamonds\"];\r\nconst heartsArray = [\"TwoHearts\", \"ThreeHearts\", \"FourHearts\", \"FiveHearts\", \"SixHearts\",\r\n\"SevenHearts\", \"EightHearts\", \"NineHearts\", \"TenHearts\",\r\n\"JackHearts\", \"QueenHearts\", \"KingHearts\", \"AceHearts\"];\r\n\r\nexport default function createInitialReduxState(suits){\r\n    let correctOrder = [];\r\n    let actualOrder = [];\r\n    if(suits.includes(\"Spades\")){\r\n        correctOrder.concat(spadesArray);\r\n    }\r\n    if(suits.includes(\"Clubs\")){\r\n        correctOrder.concat(clubsArray);\r\n    }\r\n    if(suits.includes(\"Diamonds\")){\r\n        correctOrder.concat(diamondsArray);\r\n    }\r\n    if(suits.includes(\"Hearts\")){\r\n        correctOrder.concat(heartsArray);\r\n    }\r\n    actualOrder = shuffleArray(\r\n        correctOrder.map((card) => {\r\n            return { type: card, correct: false }\r\n        })\r\n    );\r\n\r\n    const state = {\r\n        correctOrder: correctOrder,\r\n        actualOrder: actualOrder,\r\n        numCorrect: 0\r\n        };\r\n\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}