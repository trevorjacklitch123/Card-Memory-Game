{"ast":null,"code":"import { CORRECT_ORDER_CARDS, ACTUAL_ORDER_CARDS, RIGHT_CARD_CLICKED, WRONG_CARD_CLICKED, NUM_CORRECT_INCREMENT, NUM_CORRECT_RESET } from '../actions/types';\nexport function correctOrder() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CORRECT_ORDER_CARDS:\n      return action.cards;\n\n    default:\n      return previousState;\n  }\n}\nexport function actualOrder() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ACTUAL_ORDER_CARDS:\n      return action.cards;\n\n    case RIGHT_CARD_CLICKED:\n      return previousState.map(function (card) {\n        if (card.type === action.card) {\n          return Object.assign({}, card, {\n            correct: true\n          });\n        }\n\n        return card;\n      });\n\n    case WRONG_CARD_CLICKED:\n      return previousState.map(function (card) {\n        return Object.assign({}, card, {\n          correct: false\n        });\n      });\n\n    default:\n      return previousState;\n  }\n}\nexport function numCorrect() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case NUM_CORRECT_INCREMENT:\n      return previousState + 1;\n\n    case NUM_CORRECT_RESET:\n      return 0;\n\n    default:\n      return previousState;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Rover\\Desktop\\Coding\\Card-Memory-Game\\src\\reducers\\reducers.js"],"names":["CORRECT_ORDER_CARDS","ACTUAL_ORDER_CARDS","RIGHT_CARD_CLICKED","WRONG_CARD_CLICKED","NUM_CORRECT_INCREMENT","NUM_CORRECT_RESET","correctOrder","previousState","action","type","cards","actualOrder","map","card","Object","assign","correct","numCorrect"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,kBAA9B,EAAkDC,kBAAlD,EAAsEC,kBAAtE,EAA0FC,qBAA1F,EAAiHC,iBAAjH,QAA0I,kBAA1I;AAGA,OAAO,SAASC,YAAT,GAAiD;AAAA,MAA3BC,aAA2B,uEAAX,EAAW;AAAA,MAAPC,MAAO;;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,mBAAL;AACI,aAAOQ,MAAM,CAACE,KAAd;;AACJ;AACI,aAAOH,aAAP;AAJR;AAMH;AAED,OAAO,SAASI,WAAT,GAAgD;AAAA,MAA3BJ,aAA2B,uEAAX,EAAW;AAAA,MAAPC,MAAO;;AACnD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,kBAAL;AACI,aAAOO,MAAM,CAACE,KAAd;;AACJ,SAAKR,kBAAL;AACI,aAAOK,aAAa,CAACK,GAAd,CAAkB,UAACC,IAAD,EAAU;AAC/B,YAAGA,IAAI,CAACJ,IAAL,KAAcD,MAAM,CAACK,IAAxB,EAA6B;AACzB,iBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAACG,YAAAA,OAAO,EAAE;AAAV,WAAxB,CAAP;AACH;;AACD,eAAOH,IAAP;AACH,OALM,CAAP;;AAMJ,SAAKV,kBAAL;AACI,aAAOI,aAAa,CAACK,GAAd,CAAkB,UAACC,IAAD,EAAU;AAC/B,eAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,IAAlB,EAAwB;AAAEG,UAAAA,OAAO,EAAE;AAAX,SAAxB,CAAP;AACH,OAFM,CAAP;;AAGJ;AACI,aAAOT,aAAP;AAfR;AAiBH;AAED,OAAO,SAASU,UAAT,GAA8C;AAAA,MAA1BV,aAA0B,uEAAV,CAAU;AAAA,MAAPC,MAAO;;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKL,qBAAL;AACI,aAAOG,aAAa,GAAG,CAAvB;;AACJ,SAAKF,iBAAL;AACI,aAAO,CAAP;;AACJ;AACI,aAAOE,aAAP;AANR;AAQH","sourcesContent":["import { CORRECT_ORDER_CARDS, ACTUAL_ORDER_CARDS, RIGHT_CARD_CLICKED, WRONG_CARD_CLICKED, NUM_CORRECT_INCREMENT, NUM_CORRECT_RESET } from '../actions/types';\r\n\r\n\r\nexport function correctOrder(previousState = [], action){\r\n    switch(action.type){\r\n        case CORRECT_ORDER_CARDS:\r\n            return action.cards;\r\n        default:\r\n            return previousState;\r\n    }\r\n}\r\n\r\nexport function actualOrder(previousState = [], action){\r\n    switch(action.type){\r\n        case ACTUAL_ORDER_CARDS:\r\n            return action.cards;\r\n        case RIGHT_CARD_CLICKED:\r\n            return previousState.map((card) => {\r\n                if(card.type === action.card){\r\n                    return Object.assign({}, card, {correct: true});\r\n                }\r\n                return card;\r\n            });\r\n        case WRONG_CARD_CLICKED:\r\n            return previousState.map((card) => {\r\n                return Object.assign({}, card, { correct: false });\r\n            });\r\n        default:\r\n            return previousState;\r\n    }\r\n}\r\n\r\nexport function numCorrect(previousState = 0, action){\r\n    switch(action.type){\r\n        case NUM_CORRECT_INCREMENT:\r\n            return previousState + 1;\r\n        case NUM_CORRECT_RESET:\r\n            return 0;\r\n        default:\r\n            return previousState;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}