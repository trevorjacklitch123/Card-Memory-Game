{"ast":null,"code":"import { FORM_SUBMITTED, RIGHT_CARD_CLICKED, WRONG_CARD_CLICKED } from '../actions/types';\nexport function formSubmission() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FORM_SUBMITTED:\n      return createInitialReduxState(action.suits);\n\n    default:\n      return previousState;\n  }\n}\nexport function cards() {\n  var previousState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RIGHT_CARD_CLICKED:\n      return Object.assign({}, previousState, previousState.actualOrder.map(function (card) {\n        if (card.type === action.card) {\n          return Object.assign({}, card, {\n            correct: true\n          });\n        }\n\n        return card;\n      }), {\n        numCorrect: previousState.numCorrect + 1\n      });\n\n    case WRONG_CARD_CLICKED:\n      return Object.assign({}, previousState, previousState.actualOrder.map(function (card) {\n        return Object.assign({}, card, {\n          correct: false\n        });\n      }), {\n        numCorrect: 0\n      });\n\n    default:\n      return previousState;\n  }\n} //Durstenfeld Shuffle Algorithm\n\nfunction shuffleArray(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n} //Arrays with all id names for each suit\n\n\nvar spadesArray = [\"TwoSpades\", \"ThreeSpades\", \"FourSpades\", \"FiveSpades\", \"SixSpades\", \"SevenSpades\", \"EightSpades\", \"NineSpades\", \"TenSpades\", \"JackSpades\", \"QueenSpades\", \"KingSpades\", \"AceSpades\"];\nvar clubsArray = [\"TwoClubs\", \"ThreeClubs\", \"FourClubs\", \"FiveClubs\", \"SixClubs\", \"SevenClubs\", \"EightClubs\", \"NineClubs\", \"TenClubs\", \"JackClubs\", \"QueenClubs\", \"KingClubs\", \"AceClubs\"];\nvar diamondsArray = [\"TwoDiamonds\", \"ThreeDiamonds\", \"FourDiamonds\", \"FiveDiamonds\", \"SixDiamonds\", \"SevenDiamonds\", \"EightDiamonds\", \"NineDiamonds\", \"TenDiamonds\", \"JackDiamonds\", \"QueenDiamonds\", \"KingDiamonds\", \"AceDiamonds\"];\nvar heartsArray = [\"TwoHearts\", \"ThreeHearts\", \"FourHearts\", \"FiveHearts\", \"SixHearts\", \"SevenHearts\", \"EightHearts\", \"NineHearts\", \"TenHearts\", \"JackHearts\", \"QueenHearts\", \"KingHearts\", \"AceHearts\"];\n\nfunction createInitialReduxState(suits) {\n  var correctOrder = [];\n  var actualOrder = [];\n\n  if (suits.includes(\"Spades\")) {\n    correctOrder.concat(spadesArray);\n  }\n\n  if (suits.includes(\"Clubs\")) {\n    correctOrder.concat(clubsArray);\n  }\n\n  if (suits.includes(\"Diamonds\")) {\n    correctOrder.concat(diamondsArray);\n  }\n\n  if (suits.includes(\"Hearts\")) {\n    correctOrder.concat(heartsArray);\n  }\n\n  actualOrder = shuffleArray(correctOrder.map(function (card) {\n    return {\n      type: card,\n      correct: false\n    };\n  }));\n  var state = {\n    correctOrder: correctOrder,\n    actualOrder: actualOrder,\n    numCorrect: 0\n  };\n  return state;\n}","map":{"version":3,"sources":["C:\\Users\\Rover\\Desktop\\Coding\\Card-Memory-Game\\src\\reducers\\reducers.js"],"names":["FORM_SUBMITTED","RIGHT_CARD_CLICKED","WRONG_CARD_CLICKED","formSubmission","previousState","action","type","createInitialReduxState","suits","cards","Object","assign","actualOrder","map","card","correct","numCorrect","shuffleArray","array","i","length","j","Math","floor","random","temp","spadesArray","clubsArray","diamondsArray","heartsArray","correctOrder","includes","concat","state"],"mappings":"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","sourcesContent":["import {\r\n    FORM_SUBMITTED,\r\n    RIGHT_CARD_CLICKED,\r\n    WRONG_CARD_CLICKED\r\n} from '../actions/types';\r\n\r\nexport function formSubmission(previousState = [], action){\r\n    switch(action.type){\r\n        case FORM_SUBMITTED:\r\n            return createInitialReduxState(action.suits);\r\n        default:\r\n            return previousState;\r\n    }\r\n}\r\n\r\nexport function cards(previousState = [], action){\r\n    switch(action.type){\r\n        case RIGHT_CARD_CLICKED:\r\n                return Object.assign({},\r\n                    previousState,\r\n                    previousState.actualOrder.map((card) => {\r\n                        if(card.type === action.card){\r\n                            return Object.assign({}, card, {correct: true});\r\n                        }\r\n                        return card;\r\n                    }),\r\n                    { numCorrect: previousState.numCorrect + 1 }\r\n                );\r\n        case WRONG_CARD_CLICKED:\r\n            return Object.assign({},\r\n                previousState,\r\n                previousState.actualOrder.map((card) => {\r\n                    return Object.assign({}, card, { correct: false });\r\n                }),\r\n                { numCorrect: 0 });\r\n        default:\r\n            return previousState;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//Durstenfeld Shuffle Algorithm\r\nfunction shuffleArray(array) {\r\n    for (var i = array.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n}\r\n\r\n//Arrays with all id names for each suit\r\nconst spadesArray = [\"TwoSpades\", \"ThreeSpades\", \"FourSpades\", \"FiveSpades\", \"SixSpades\",\r\n\"SevenSpades\", \"EightSpades\", \"NineSpades\", \"TenSpades\",\r\n\"JackSpades\", \"QueenSpades\", \"KingSpades\", \"AceSpades\"];\r\nconst clubsArray = [\"TwoClubs\", \"ThreeClubs\", \"FourClubs\", \"FiveClubs\", \"SixClubs\",\r\n\"SevenClubs\", \"EightClubs\", \"NineClubs\", \"TenClubs\",\r\n\"JackClubs\", \"QueenClubs\", \"KingClubs\", \"AceClubs\"];\r\nconst diamondsArray = [\"TwoDiamonds\", \"ThreeDiamonds\", \"FourDiamonds\", \"FiveDiamonds\", \"SixDiamonds\",\r\n\"SevenDiamonds\", \"EightDiamonds\", \"NineDiamonds\", \"TenDiamonds\",\r\n\"JackDiamonds\", \"QueenDiamonds\", \"KingDiamonds\", \"AceDiamonds\"];\r\nconst heartsArray = [\"TwoHearts\", \"ThreeHearts\", \"FourHearts\", \"FiveHearts\", \"SixHearts\",\r\n\"SevenHearts\", \"EightHearts\", \"NineHearts\", \"TenHearts\",\r\n\"JackHearts\", \"QueenHearts\", \"KingHearts\", \"AceHearts\"];\r\n\r\nfunction createInitialReduxState(suits){\r\n    let correctOrder = [];\r\n    let actualOrder = [];\r\n    if(suits.includes(\"Spades\")){\r\n        correctOrder.concat(spadesArray);\r\n    }\r\n    if(suits.includes(\"Clubs\")){\r\n        correctOrder.concat(clubsArray);\r\n    }\r\n    if(suits.includes(\"Diamonds\")){\r\n        correctOrder.concat(diamondsArray);\r\n    }\r\n    if(suits.includes(\"Hearts\")){\r\n        correctOrder.concat(heartsArray);\r\n    }\r\n    actualOrder = shuffleArray(\r\n        correctOrder.map((card) => {\r\n            return { type: card, correct: false }\r\n        })\r\n    );\r\n\r\n    const state = {\r\n        correctOrder: correctOrder,\r\n        actualOrder: actualOrder,\r\n        numCorrect: 0\r\n        };\r\n\r\n    return state;\r\n}"]},"metadata":{},"sourceType":"module"}